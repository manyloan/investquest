spring.application.name=user-service

# ==========================================
# CONFIGURAÇÃO DO BANCO DE DADOS (DATASOURCE)
# ==========================================
# A URL de conexão JDBC. 'localhost:5432' funciona porque mapeamos essa porta no docker-compose.
# 'investquest_db' é o nome do banco que definimos no docker-compose.
spring.datasource.url=jdbc:postgresql://localhost:5432/investquest_db

# O usuário do banco, conforme definido no docker-compose.
spring.datasource.username=admin

# A senha do banco, conforme definido no docker-compose.
spring.datasource.password=admin


# ==========================================
# CONFIGURAÇÃO DO JPA/HIBERNATE (NOSSO ORM)
# ==========================================
# DDL (Data Definition Language) Auto: Diz ao Hibernate como gerenciar o schema do banco.
# 'update': O Hibernate vai verificar as entidades no código e criar/alterar as tabelas no banco automaticamente.
# Ótimo para desenvolvimento, mas nunca use 'update' em produção!
spring.jpa.hibernate.ddl-auto=update

# Mostra no console o SQL que o Hibernate está gerando. Excelente para debugar.
spring.jpa.show-sql=true

# Propriedades adicionais do Hibernate.
# 'dialect': Informa ao Hibernate qual "sotaque" de SQL ele deve usar (PostgreSQL, MySQL, etc).
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# ==========================================
# CONFIGURAÇÃO DE SEGURANÇA (JWT)
# ==========================================
# Chave secreta para assinatura dos tokens JWT, codificada em Base64
# Você pode gerar a sua em: https://www.base64encode.org/
# Usa a variável de ambiente JWT_SECRET_KEY, ou, se não existir, usa o valor padrão após os ":"
application.security.jwt.secret-key=${JWT_SECRET_KEY:c3VhQ2hhdmVTZWNyZXRhU3VwZXJMb25nYVBhcmFBc3NpbmFyT0pXVGRldmVUZXJQZWxvTWVub3MyNTZCaXRz}